package bot // import "cirello.io/gobot/bot"

import (
	"cirello.io/gobot/brain"
	"cirello.io/gobot/messages"
)

// Self encapsulates all the necessary state to have a robot running. Including
// identity (Name).
type Self struct {
	Name        string
	ProviderOut chan messages.Message
	ProviderIn  chan messages.Message
	Rules       []RuleParser

	*brain.Brain
}

// Option type is the self-referencing method of tweaking gobot's internals.
type Option func(*Self)

// New creates a new gobot.
func New(name string, opts ...Option) *Self {
	s := &Self{
		Name:        name,
		Brain:       brain.New(),
		ProviderIn:  make(chan messages.Message),
		ProviderOut: make(chan messages.Message),
	}
	for _, opt := range opts {
		opt(s)
	}
	return s
}

// Process connects the flow of incoming messages with the ruleset, and
// dispatches the outgoing messages generated by the ruleset. Each message lives
// in its own goroutine.
func (s *Self) Process() {
	for in := range s.ProviderIn {
		go func(self Self, msg messages.Message) {
			for _, rule := range s.Rules {
				responses := rule.ParseMessage(self, msg)
				for _, r := range responses {
					s.ProviderOut <- r
				}
			}
		}(*s, in)
	}
}

// MemoryRead reads an arbitraty value from the robot's Brain.
func (s *Self) MemoryRead(ruleName, key string) interface{} {
	return s.Brain.Read(ruleName, key)
}

// MemorySave reads an arbitraty value from the robot's Brain.
func (s *Self) MemorySave(ruleName, key string, value interface{}) {
	s.Brain.Save(ruleName, key, value)
}
